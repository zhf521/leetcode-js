/*
题目名称：滑动窗口的最大值
题目地址：https://leetcode.cn/problems/sliding-window-maximum/

给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。

返回 滑动窗口中的最大值 。

 

示例 1：

输入：nums = [1,3,-1,-3,5,3,6,7], k = 3
输出：[3,3,5,5,6,7]
解释：
滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
示例 2：

输入：nums = [1], k = 1
输出：[1]
 

提示：

1 <= nums.length <= 105
-104 <= nums[i] <= 104
1 <= k <= nums.length

*/
/*思路：

双指针+遍历法

按照题意，它要求我们在遍历数组的过程当中，约束一个窗口——窗口的本质其实就是一个范围，范围就被圈定在了前三个元素

约束范围，可以用双指针。因此我这里定义一个 left 左指针、定义一个 right 右指针，分别指向窗口的两端即可

接下来我们可以把这个窗口里的数字取出来，直接遍历一遍、求出最大值，然后把最大值存进结果数组。这样第一个窗口的最大值就有了

接着按照题意，窗口每次前进一步

我们要做的仍然是取出当前范围的所有元素、遍历一遍求出最大值，然后将最大值存进结果数组

反复执行上面这个过程，直到数组完全被滑动窗口遍历完毕，我们也就得到了问题的答案

//双端队列法

使用双端队列法，核心的思路是维护一个有效的递减队列

在遍历数组的前期，我们尝试将遍历到的每一个元素都推入队列内部

每尝试推入一个元素前，都把这个元素与队列尾部的元素作对比。根据对比结果的不同，采取不同的措施：
如果试图推入的元素（当前元素）大于队尾元素，则意味着队列的递减趋势被打破了。此时我们需要将队列尾部的元素依次出队（注意由于是双端队列，所以队尾出队是没有问题的）、直到队尾元素大于等于当前元素为止，此时再将当前元素入队。
如果试图推入的元素小于队列尾部的元素，那么就不需要额外的操作，直接把当前元素入队即可。

维持递减队列的目的，就在于确保队头元素始终是当前窗口的最大值。

当遍历到的元素个数达到了 k 个时，意味着滑动窗口的第一个最大值已经产生了，我们把它 push 进结果数组里

检查队尾元素，看是不是都满足大于等于当前元素的条件。如果是的话，直接将当前元素入队。否则，将队尾元素逐个出队、直到队尾元素大于等于当前元素为止。
将当前元素入队
检查队头元素，看队头元素是否已经被排除在滑动窗口的范围之外了。如果是，则将队头元素出队。
判断滑动窗口的状态：看当前遍历过的元素个数是否小于 k。如果元素个数小于k，这意味着第一个滑动窗口内的元素都还没遍历完、第一个最大值还没出现，此时我们还不能动结果数组，只能继续更新队列；如果元素个数大于等于k，这意味着滑动窗口的最大值已经出现了，此时每遍历到一个新元素（也就是滑动窗口每往前走一步）都要及时地往结果数组里添加当前滑动窗口对应的最大值（最大值就是此时此刻双端队列的队头元素）

*/

// //双指针+遍历法
// /**
//  * @param {number[]} nums
//  * @param {number} k
//  * @return {number[]}
//  */
// var maxSlidingWindow = function (nums, k) {
//   // 缓存数组的长度
//   const len = nums.length
//   // 定义结果数组
//   const res = []
//   // 初始化左指针
//   let left = 0
//   // 初始化右指针
//   let right = k - 1
//   // 当数组没有被遍历完时，执行循环体内的逻辑
//   while (right < len) {
//     //计算当前窗口内的最大值
//     const max = calMax(nums, left, right)
//     // 将最大值推入结果数组
//     res.push(max)
//     // 左指针前进一步
//     left++
//     // 右指针前进一步
//     right++
//   }
//   // 返回结果数组
//   return res
// }
// // 这个函数用来计算最大值
// function calMax(arr, left, right) {
//   // 处理数组为空的边界情况
//   if (!arr || !arr.length) {
//     return;
//   }
//   // 初始化 maxNum 的值为窗口内第一个元素
//   let maxNum = arr[left];
//   // 遍历窗口内所有元素，更新 maxNum 的值
//   for (let i = left; i <= right; i++) {
//     if (arr[i] > maxNum) {
//       maxNum = arr[i];
//     }
//   }
//   // 返回最大值
//   return maxNum;
// }

//双端队列法

/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number[]}
 */
var maxSlidingWindow = function(nums, k) {
  // 缓存数组的长度
  const len = nums.length
  //初始化结果数组
  const res = []
  // 初始化双端队列
  const deque = []
  // 开始遍历数组
  for (let i = 0; i < len; i++) {
    // 当队尾元素小于当前元素时
    while (deque.length && nums[deque[deque.length - 1]] < nums[i]) {
      // 将队尾元素（索引）不断出队，直至队尾元素大于等于当前元素
      deque.pop()
    }
    // 入队当前元素索引（注意是索引）
    deque.push(i)
    // 当队头元素的索引已经被排除在滑动窗口之外时
    while (deque.length && deque[0] <= i - k) {
      // 将队头元素索引出队
      deque.shift()
    }
    // 判断滑动窗口的状态，只有在被遍历的元素个数大于 k 的时候，才更新结果数组
    if (i >= k - 1) {
      res.push(nums[deque[0]])
    }
  }
  // 返回结果数组
  return res
};

// 测试用例
let nums = [1, 3, -1, -3, 5, 3, 6, 7],
  k = 3

console.time('执行用时')
console.log(maxSlidingWindow(nums, k))
console.timeEnd('执行用时')
